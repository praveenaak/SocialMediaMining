# -*- coding: utf-8 -*-
"""SMM_InteractionGraph.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BUYznOt6fFdUov31FirtI6SaE6nMRwKy
"""

!pip install networkx==2.3

import networkx as ntw
import matplotlib as plt
import json
from operator import itemgetter

with open('ProVtweets3.json', 'r') as f:
  data = json.load(f)

print(type(data))

PVG = ntw.Graph()

for tweet in data:
 PVG.add_nodes_from(tweet['user']['name'])

for tweet in data:
  for user_mentions in tweet['entities']['user_mentions']:
    PVG.add_edge(user_mentions['name'],tweet['user']['name'])

ntw.draw(
    PVG,cmap=plt.cm.PiYG, edge_color="green", linewidths=0.3, node_size=6, alpha=0.6, with_labels=False
)

print(f"Number of nodes in the Pro-Vaccine Interaction Graph :{PVG.number_of_nodes()}")

print(f"Number of Connected Components in the Pro-Vaccine Interaction Graph : {ntw.number_connected_components(PVG)}")

import matplotlib.pyplot as plt
degrees = [PVG.degree(n) for n in PVG.nodes()]
plt.hist(degrees)
plt.show()

PVG_largest_subgraph = max(ntw.connected_component_subgraphs(PVG), key=len)

graph_centrality = ntw.degree_centrality(PVG_largest_subgraph)
print(f"The graph centrality for Pro-Vaccine Interaction Network:")
print(graph_centrality)

print(f"The largest subgraph in the Pro-vaccine Interaction Graph has {PVG_largest_subgraph.number_of_nodes()} nodes and {PVG_largest_subgraph.number_of_edges()} edges.")

print(f"The diameter of the Pro-Vaccine Interaction network is {ntw.diameter(PVG_largest_subgraph)}")

ntw.draw(PVG_largest_subgraph,cmap=plt.cm.PiYG, edge_color="Green", linewidths=0.3, node_size=60, alpha=0.6, with_labels=True)

f=0
for cc in sorted(ntw.connected_component_subgraphs(PVG), key = len, reverse=True):
    if cc.number_of_nodes()>10 :
        ntw.draw(cc ,cmap=plt.cm.PiYG, edge_color="green", linewidths=0.3, node_size=60, alpha=0.6, with_labels=True)
        plt.savefig('_'+str(f)+'PVGgraph.png')
        f+=1
        plt.close()

with open('AntiVtweets3.json', 'r') as f:
  AVdata = json.load(f)

AVG = ntw.Graph()

for tweet in AVdata:
  AVG.add_nodes_from(tweet['user']['name'])

for tweet in AVdata:
  for user_mentions in tweet['entities']['user_mentions']:
    AVG.add_edge(user_mentions['name'],tweet['user']['name'])

ntw.draw(
    AVG,cmap=plt.cm.PiYG, edge_color="red", linewidths=0.3, node_size=6, alpha=0.6, with_labels=False
)

print(f"Number of nodes in the Anti-Vaccine Interaction Graph :{AVG.number_of_nodes()}")

AVG_degrees = [AVG.degree(n) for n in AVG.nodes()]
plt.hist(AVG_degrees)
plt.show()

print(f"Number of Connected Components in the Anti-Vaccine Interaction Graph : {ntw.number_connected_components(AVG)}")

AVG_largest_subgraph = max(ntw.connected_component_subgraphs(AVG), key=len)

print(f"The largest subgraph in the Pro-vaccine Interaction Graph has {AVG_largest_subgraph.number_of_nodes()} nodes and {AVG_largest_subgraph.number_of_edges()} edges.")

graph_centrality_AVG = ntw.degree_centrality(AVG_largest_subgraph)
print(f"The graph centrality for Anti-Vaccine Interaction Network's largest subgraph:")
print(graph_centrality_AVG)

print(f"The diameter of the Pro-Vaccine Interaction network is {ntw.diameter(AVG_largest_subgraph)}")

ntw.draw(AVG_largest_subgraph,cmap=plt.cm.PiYG, edge_color="red", linewidths=0.3, node_size=6, alpha=0.6, with_labels=False)

ntw.draw(AVG_largest_subgraph,cmap=plt.cm.PiYG, edge_color="red", linewidths=0.3, node_size=6, alpha=0.6, with_labels=True)

f=0
for cc in sorted(ntw.connected_component_subgraphs(AVG), key = len, reverse=True):
    if cc.number_of_nodes()>10 :
        ntw.draw(cc ,cmap=plt.cm.PiYG, edge_color="red", linewidths=0.3, node_size=60, alpha=0.6, with_labels=True)
        plt.savefig('_'+str(f)+'AVGgraph.png')
        f+=1
        plt.close()

d = dict(AVG_largest_subgraph.degree)

ntw.draw(AVG_largest_subgraph,cmap=plt.cm.PiYG, edge_color="red", linewidths=0.3, node_size=[v * 10 for v in d.values()], alpha=0.6, with_labels=False)

d2 = dict(PVG_largest_subgraph.degree)

ntw.draw(PVG_largest_subgraph,cmap=plt.cm.PiYG, edge_color="green", linewidths=0.3, node_size=[v * 10 for v in d2.values()], alpha=0.6, with_labels=False)

graph_betweenness = ntw.betweenness_centrality(AVG_largest_subgraph, normalized=True, endpoints=False)

graph_betweenness = ntw.betweenness_centrality(PVG_largest_subgraph, normalized=True, endpoints=False)

graph_betweenness

max_bet = max(graph_betweenness.items(), key=itemgetter(1))

AVG_graph_closeness = ntw.closeness_centrality(PVG_largest_subgraph)

max_clo = max(AVG_graph_closeness.items(), key=itemgetter(1))

graph_centrality = ntw.degree_centrality(PVG_largest_subgraph)

max_de = max(graph_centrality.items(), key=itemgetter(1))